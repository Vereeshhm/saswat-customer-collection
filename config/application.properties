spring.application.name=Saswat Customer Collection

server.port=8081
server.servlet.context-path=/collect/

spring.datasource.url=jdbc:postgresql://localhost:5432/EasbuzzPay
spring.datasource.username=postgres
spring.datasource.password=vereesh@1425
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
spring.datasource.driver=cdata.jdbc.postgresql.PostgreSQLDriver

# Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto = update

#server.error.include-stacktrace=never

datasource.hikari.connection-timeout = 20000
datasource.hikari.minimum-idle= 5
datasource.hikari.maximum-pool-size= 100
datasource.hikari.idle-timeout=10000
datasource.hikari.max-lifetime= 1000
datasource.hikari.auto-commit =true


#credentials
Key=5OEKXZESM
Salt=45LIQ9B8U
surl=http://localhost/php-kit/response.php
furl=http://localhost/php-kit/response.php
request_flow=SEAMLESS


#refund
easebuzz_id=T3W4E9GPRZ

#URL's
Initiate.Url=https://stoplight.io/mocks/easebuzz/payment-gateway/88397287/payment/initiateLink
Transaction.Url=https://stoplight.io/mocks/easebuzz/payment-gateway/88393071/transaction/v2.1/retrieve
Refund.Url=https://stoplight.io/mocks/easebuzz/payment-gateway/88393734/transaction/v1/refund
RefundStatus.Url=https://stoplight.io/mocks/easebuzz/payment-gateway/88393734/refund/v1/retrieve

################# LOGGING ###################
logging.level.org.hibernate.SQL=WARN
logging.level.org.hibernate.type=INFO
logging.level.root= INFO
logging.level.org.springframework.security= INFO
logging.level.org.springframework.web= ERROR
logging.level.org.hibernate= INFO
logging.pattern.console=%d{dd-MM-yyyy HH:mm:ss.SSS}  %magenta([%thread]) %highlight(%-5level) %logger.%M::%L - %msg%n
logging.pattern.file=%d{dd-MM-yyyy HH:mm:ss.SSS} %highlight(%-5level) %logger.%M::%L - %msg%n
logging.file.name =logs/saswat-customer-collection.log


#SSL
server.ssl.enabled=false
security.require-ssl=false

#for Dev
server.ssl.key-store = keystore/rewardsService.p12
server.ssl.key-store-password = rewardsService
server.ssl.key-store-type = PKCS12

#for QA
#server.ssl.key-store = keystore/rewardsService.p12
#server.ssl.key-store-password = rewardsService
#server.ssl.key-store-type = PKCS12

server.ssl.ciphers=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_DHE_RSA_WITH_AES_128_GCM_SHA256,TLS_DHE_DSS_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_SHA256,TLS_ECDHE_RSA_WITH_AES_128_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_SHA,TLS_ECDHE_RSA_WITH_AES_256_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_SHA384,TLS_ECDHE_RSA_WITH_AES_256_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_SHA,TLS_DHE_RSA_WITH_AES_128_SHA256,TLS_DHE_RSA_WITH_AES_128_SHA,TLS_DHE_DSS_WITH_AES_128_SHA256,TLS_DHE_RSA_WITH_AES_256_SHA256,TLS_DHE_DSS_WITH_AES_256_SHA,TLS_DHE_RSA_WITH_AES_256_SHA,SSL_RSA_WITH_3DES_EDE_CBC_SHA
server.ssl.protocol=TLS
server.ssl.enabled-protocols=TLSv1.2


